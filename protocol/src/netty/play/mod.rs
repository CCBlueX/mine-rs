use crate::errors::InvalidEnumId;
use crate::*;

use protocol_derive::Protocol;
use std::borrow::Cow;

pub mod clientbound;
pub mod serverbound;

#[derive(Protocol)]
#[from(u8)]
pub enum AnimationId0 {
    None = 0,
    SwingArm,
    Damage,
    LeaveBed,
    EatFood,
    Crit,
    MagicCrit,
    Unknown = 102,
    Crouch,
    Uncrouch,
}

pub struct PlayerAbilities0 {
    pub invulnerable: bool,
    pub flying: bool,
    pub allow_flying: bool,
    pub creative_mode: bool,
    pub flying_speed: f32,
    /// Modifies the field of view, like a speed potion. A Notchian server will
    /// use the same value as the movement speed (send in the Entity Properties
    /// packet).
    pub fov: f32,
}
impl ProtocolRead<'_> for PlayerAbilities0 {
    fn read(cursor: &'_ mut std::io::Cursor<&[u8]>) -> Result<Self, ReadError> {
        let flags = u8::read(cursor)?;
        Ok(PlayerAbilities0 {
            invulnerable: flags & 0b0001 != 0,
            flying: flags & 0b0010 != 0,
            allow_flying: flags & 0b0100 != 0,
            creative_mode: flags & 0b1000 != 0,
            flying_speed: f32::read(cursor)?,
            fov: f32::read(cursor)?,
        })
    }
}
impl ProtocolWrite for PlayerAbilities0 {
    fn write(self, writer: &mut impl std::io::Write) -> Result<(), WriteError> {
        ((self.invulnerable as u8)
            + ((self.flying as u8) << 1)
            + ((self.allow_flying as u8) << 2)
            + ((self.creative_mode as u8) << 3))
            .write(writer)?;
        self.flying_speed.write(writer)?;
        self.fov.write(writer)?;
        Ok(())
    }

    fn size_hint() -> usize {
        9
    }
}

#[derive(Protocol)]
#[from(u8)]
pub enum Difficulty0 {
    Peaceful = 0,
    Easy,
    Normal,
    Hard,
}

#[derive(Protocol)]
// https://dinnerbone.com/blog/2012/01/13/minecraft-plugin-channels-messaging/
pub struct PluginMessage0<'a> {
    pub channel: Cow<'a, str>,
    pub data: Cow<'a, [u8]>,
}

protocol_derive::packets! {
    play_cb_custom play_cb_tree clientbound::;
    0x00 => {
        0..=31 => KeepAlive0,
    },
    0x01 => {
        0 => JoinGame0,
        1..=28 => JoinGame1<'a>,
        // 29..=66 => _29,
        // 67..=99 => _67,
        // 100..=760 => _100,
    },
    0x02 => {
        0..=5 => ChatMessage0,
        // 6..=12 => _6,
        // 13..=66 => _13,
        // 67..=99 => _67,
        // 100..=719 => _100,
        // 721..=758 => _721,
        // 759..=760 => _759,
    },
    0x03 => {
        0..=66 => TimeUpdate0,
        // 67..=99 => _67,
        // 100..=210 => _100,
        // 310..=498 => _310,
        // 550..=719 => _550,
        // 721..=758 => _721,
        // 759..=760 => _759,
    },
    0x04 => {
        0..=6 => EntityEquipment0,
        // 7..=48 => _7,
        // 49..=66 => _49,
        // 67..=94 => _67,
        // 95..=352 => _95,
        // 353..=719 => _353,
        // 721..=758 => _721,
        // 759..=760 => _759,
    },
    0x05 => {
        0..=5 => SpawnPosition0,
        // 6..=66 => _6,
        // 67..=99 => _67,
        // 100..=498 => _100,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x06 => {
        0..=6 => UpdateHealth0,
        // 7..=66 => _7,
        // 67..=719 => _67,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x07 => {
        0 => Respawn0,
        1..=66 => Respawn1<'a>,
        // 67..=345 => _67,
        // 346..=719 => _346,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x08 => {
        0..=5 => PositionAndLook0,
        // 6..=66 => _6,
        // 67..=317 => _67,
        // 318..=320 => _318,
        // 321..=323 => _321,
        // 324..=325 => _324,
        // 326..=327 => _326,
        // 328..=331 => _328,
        // 332..=498 => _332,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x09 => {
        0..=66 => HeldItemChange0,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=498 => _332,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x0a => {
        0..=5 => UseBed0,
        // 6 => _6,
        // 7..=66 => _7,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=498 => _332,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=756 => _755,
        // 757..=758 => _757,
        // 759..=760 => _760,
    },
    0x0b => {
        0..=66 => Animation0,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=498 => _332,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x0c => {
        0..=4 => SpawnPlayer0<'a>,
        5 => SpawnPlayer5<'a>,
        // 6 => _6,
        // 7..=13 => _7,
        // 14..=18 => _14,
        // 19..=48 => _19,
        // 49..=66 => _49,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=498 => _332,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x0d => {
        0..=6 => CollectItem0,
        // 7..=66 => _7,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=463 => _332,
        // 464..=498 => _464,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x0e => {
        0..=48 => SpawnObject0,
        // 49..=66 => _49,
        // 67..=317 => _67,
        // 318..=342 => _318,
        // 343..=498 => _343,
        // 550..=719 => _550,
        // 721..=754 => _721,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x0f => {
        0..=48 => SpawnMob0,
        // 49..=66 => _49,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=342 => _332,
        // 343..=498 => _343,
        // 550..=717 => _550,
        // 718..=719 => _718,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x10 => {
        0..=7 => SpawnPainting<'a>,
        // 8..=66 => _8,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=342 => _332,
        // 343..=344 => _343,
        // 345 => _345,
        // 346..=356 => _346,
        // 357..=498 => _357,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=741 => _740,
        // 743..=754 => _743,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x11 => {
        0..=66 => SpawnExpOrb0,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345 => _345,
        // 346..=498 => _346,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x12 => {
        0..=6 => EntityVelocity0,
        // 7..=66 => _7,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=498 => _345,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x13 => {
        0..=6 => DestroyEntities0,
        // 7..=66 => _7,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=498 => _345,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x14 => {
        0..=6 => Entity0,
        // 7..=66 => _7,
        // 67..=210 => _67,
        // 301..=317 => _301,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=451 => _345,
        // 452..=470 => _452,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755 => _755,
        // 756..=758 => _756,
        // 759..=760 => _759,
    },
    0x15 => {
        0..=6 => EntityRelativeMove0,
        // 7..=21 => _7,
        // 22..=66 => _22,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=470 => _345,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x16 => {
        0..=6 => EntityLook0,
        // 7..=21 => _7,
        // 22..=66 => _22,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=470 => _345,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755 => _755,
        // 756..=758 => _756,
        // 759..=760 => _759,
    },
    0x17 => {
        0..=6 => EntityLookAndRelativeMove0,
        // 7..=21 => _7,
        // 22..=66 => _22,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=470 => _345,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x18 => {
        0..=6 => EntityTeleport0,
        // 7..=21 => _7,
        // 22..=66 => _22,
        // 67..=317 => _67,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=470 => _345,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x19 => {
        0..=6 => EntityHeadLook0,
        // 7..=66 => _7,
        // 67..=79 => _67,
        // 80..=94 => _80,
        // 95..=110 => _95,
        // 201..=317 => _201,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 343..=344 => _343,
        // 345..=384 => _345,
        // 385..=470 => _385,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x20 => {
        0..=6 => EntityStatus0,
        // 7..=66 => _7,
        // 67..=69 => _67,
        // 70..=79 => _70,
        // 80..=85 => _80,
        // 86..=109 => _86,
        // 110..=317 => _110,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=388 => _345,
        // 389..=470 => _389,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=738 => _721,
        // 740..=744 => _740,
        // 746..=754 => _746,
        // 755..=758 => _755,
        // 759..=760 => _759,
    },
    0x21 => {
        0..=22 => AttachEntity0,
        // 23..=26 => _23,
        // 27..=59 => _27,
        // 60..=66 => _60,
        // 67..=79 => _67,
        // 80..=85 => _80,
        // 86..=317 => _86,
        // 318..=331 => _318,
        // 332..=344 => _332,
        // 345..=388 => _345,
        // 389..=470 => _389,
        // 471..=498 => _471,
        // 550..=719 => _550,
        // 721..=730 => _721,
        // 732..=738 => _732,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _760,
    },
    0x22 => {
        0..=3 => EntityMetadata0,
        // 4..=24 => _4,
        // 25..=61 => _25,
        // 62..=66 => _62,
        // 67..=79 => _67,
        // 80..=85 => _80,
        // 86..=317 => _86,
        // 318..=331 => _318,
        // 332..=342 => _332,
        // 343..=344 => _343,
        // 345..=388 => _345,
        // 389..=404 => _389,
        // 443..=470 => _443,
        // 471..=498 => _471,
        // 550..=551 => _550,
        // 552..=719 => _552,
        // 721..=738 => _721,
        // 740..=754 => _740,
        // 755..=758 => _755,
        // 759..=760 => _759,
    }
}
play_cb_custom! {
    pub enum CbPlay<'a> {
        #(#PacketName(#PacketType),)
    }
}
impl<'a> CbPlay<'a> {
    pub fn parse(id: i32, pv: i32, data: &'a [u8]) -> Result<Self, ReadError> {
        let mut cursor = std::io::Cursor::new(data);
        play_cb_tree! {
            id, pv,
            {<#PacketType as ProtocolRead>::read(&mut cursor).map(CbPlay::#PacketName)},
            {Err(ReadError::InvalidProtocolVersionIdCombination)}
        }
    }
}

protocol_derive::packets! {
    play_sb_custom play_sb_tree serverbound::;
}
play_sb_custom! {
    pub enum SbPlay {
        #(#PacketName(#PacketType),)
    }
}
impl SbPlay {
    pub fn parse(id: i32, pv: i32, data: &[u8]) -> Result<Self, ReadError> {
        let mut cursor = std::io::Cursor::new(data);
        play_sb_tree! {
            id, pv,
            {<#PacketType as ProtocolRead>::read(&mut cursor).map(SbPlay::#PacketName)},
            {Err(ReadError::InvalidProtocolVersionIdCombination)}
        }
    }
}
